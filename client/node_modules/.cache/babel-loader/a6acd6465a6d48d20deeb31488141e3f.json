{"ast":null,"code":"import _classCallCheck from \"/Users/EasonChang/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/EasonChang/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/EasonChang/counter-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/EasonChang/counter-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/EasonChang/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/EasonChang/counter-app/src/components/counter.jsx\";\nimport React, { Component } from 'react';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      count: 0,\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n\n    _this.handleIncrement = function (product) {\n      console.log(product);\n\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"renderTags\",\n\n    /*\n    constructor(){\n        super();\n        this.handleIncrement = this.handleIncrement.bind(this);\n    }\n    */\n    value: function renderTags() {\n      if (this.state.tags.length === 0) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, \"There are no tags!\");\n      } else {\n        return React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, \" \", this.state.tags.map(function (tag) {\n          return React.createElement(\"li\", {\n            key: tag,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, \" \", tag, \" \");\n        }), \" \");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: this.getBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, this.formatCount()), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.handleIncrement();\n        },\n        className: \"btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Increment\"));\n    }\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      var classes = \"badge m-2 badge-\";\n\n      if (this.state.count === 0) {\n        classes += \"warning\";\n      } else {\n        classes += \"primary\";\n      }\n\n      return classes;\n    }\n  }, {\n    key: \"formatCount\",\n    value: function formatCount() {\n      var count = this.state.count;\n      return count === 0 ? \"Zero\" : count;\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;","map":{"version":3,"sources":["/Users/EasonChang/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","tags","handleIncrement","product","console","log","setState","length","map","tag","props","getBadgeClasses","formatCount","classes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAGMC,O;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AAFF,K;;UAqBRC,e,GAAkB,UAACC,OAAD,EAAa;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,YAAKG,QAAL,CAAc;AAACN,QAAAA,KAAK,EAAE,MAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA3B,OAAd;AACH,K;;;;;;;;AAnBD;;;;;;iCAOY;AACR,UAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBM,MAAhB,KAA2B,CAA9B,EAAgC;AAC5B,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACH,OAFD,MAEK;AACD,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAM,KAAKR,KAAL,CAAWE,IAAX,CAAgBO,GAAhB,CAAoB,UAAAC,GAAG;AAAA,iBAAI;AAAI,YAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBA,GAAhB,MAAJ;AAAA,SAAvB,CAAN,MAAP;AACH;AAEJ;;;6BAOQ;AAAA;;AACLL,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKK,KAA1B;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0C,KAAKC,WAAL,EAA1C,CADJ,EAEI;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACV,eAAL,EAAN;AAAA,SADb;AAEI,QAAA,SAAS,EAAC,0BAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CADJ;AAWH;;;sCAGiB;AACd,UAAIW,OAAO,GAAG,kBAAd;;AACA,UAAI,KAAKd,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AACxBa,QAAAA,OAAO,IAAI,SAAX;AACH,OAFD,MAGK;AACDA,QAAAA,OAAO,IAAI,SAAX;AACH;;AACD,aAAOA,OAAP;AACH;;;kCAEa;AAAA,UACFb,KADE,GACQ,KAAKD,KADb,CACFC,KADE;AAEV,aAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACH;;;;EAzDiBH,S;;AA8DtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Counter extends Component {\n    state = {\n        count: 0,\n        tags: ['tag1', 'tag2', 'tag3']\n    };\n\n    /*\n    constructor(){\n        super();\n        this.handleIncrement = this.handleIncrement.bind(this);\n    }\n    */\n\n    renderTags(){\n        if(this.state.tags.length === 0){\n            return <p>There are no tags!</p>;\n        }else{\n            return <ul> {this.state.tags.map(tag => <li key={tag}> {tag} </li>)} </ul>;\n        }\n\n    }\n\n    handleIncrement = (product) => {\n        console.log(product);\n        this.setState({count: this.state.count + 1 });\n    }\n\n    render() { \n        console.log('props', this.props);\n        return (\n            <div>\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n                <button \n                    onClick={() => this.handleIncrement()} \n                    className=\"btn btn-secondary btn-sm\">\n                    Increment\n                </button>\n                \n            </div>\n        );\n    }\n\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        if (this.state.count === 0) {\n            classes += \"warning\";\n        }\n        else {\n            classes += \"primary\";\n        }\n        return classes;\n    }\n\n    formatCount() {\n        const { count } = this.state;\n        return count === 0 ? \"Zero\" : count;\n    }\n\n\n}\n \nexport default Counter;"]},"metadata":{},"sourceType":"module"}